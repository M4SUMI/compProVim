snippet     main
abbr        main
options     head
    #include <bits/stdc++.h>
    #define range(i, a, b) for(int i = (a); i < (b); i++)
    #define rep(i, a) range(i, 0, a)
    using namespace std;

    int main() {
        return 0;
    }

snippet     rep
abbr        rep
options     head
    rep (${1:i}, ${2}) {
        ${3:TARGET}
    }

snippet     range
abbr        range
options     head
    range (${1:i}, ${2}, ${3}) {
        ${4:TARGET}
    }



#####################
#                   #
#   dataStructure   #
#                   #
#####################
snippet     unionFindTree
abbr        unionFindTree
options     head
    class unionFindTree {
        private:
            vector <int> tree;
            vector <int> rank;
            vector <int> elem;
        public:
            unionFindTree() {}

            unionFindTree(int sz) {
                tree = vector <int> (sz);
                rank = vector <int> (sz, 0);
                elem = vecotr <int> (sz, 0);
                for(int i = 0; i < tree.size(); i++)
                    tree[i] = i;
            }

            unionFindTree(const unionFindTree &o) {
                tree = o.tree;
                rank = o.rank;
                elem = o.elem;
            }

            unionFindTree &operator=(const unionFindTree &o) {
                tree = o.tree;
                rank = o.rank;
                elem = o.elem;
                return (*this);
            };

            int root(int x) {
                return tree[x] == x ? x : tree[x] = root(tree[x]);
            }

            bool same(int a, int b) {
                return root(a) == root(b);
            }

            void unite(int a, int b) {
                a = root(a);
                b = root(b);
                if(a == b)return;

                if(rank[a] < rank[b]) swap(a, b);

                tree[b] = a;
                rank[a] += rank[a] == rank[b];
                elem[a] += elem[b];
            }

            int size() {
                return tree.size();
            }

            int size(int a) {
                return elem[root(a)];
            }
    };

#####################
#                   #
#       graph       #
#                   #
#####################
snippet     kruskal
abbr        kruskal
options     head
    class Kruskal : public unionFindTree{
        private:
            struct edge {
                int u, v, cost;
                bool operator< (const edge& e) const {
                    return cost < e.cost;
                }
            };
            vector <edge> es;
            int V;

        public:
            Kruskal(int v, int e) : unionFindTree(v){
                V = v;
                es = vector <edge> (e);
            }

            void addEdge(int start, int end, int cost) {
                es.push_back({start, end, cost});
            }

            int execute() {
                sort(es.begin(), es.end());
                int res = 0;
                for(int i = 0; i < es.size(); i++) {
                    edge e = es[i];
                    if(!same(e.u, e.v)) {
                        unite(e.u, e.v);
                        res += e.cost;
                    }
                }
                return res;
            }
    };

snippet     dijkstra
abbr        dijkstra
options     head
    class Dijkstra {
        private:
            struct edge {int to, cost;};
            vector <vector <edge>> G;
            vector <int> d;
            priority_queue <pair <int, int>, vector <pair <int, int>>, greater <pair <int, int>>> que;

        public:
            Dijkstra(int v) {
                G = vector <vector <edge>> (v);
                d = vector <int> (v);
            }

            void addEdge(int start, int end, int cost) {
                G[start].push_back({end, cost});
            }

            int dist(int n) {
                return d[n];
            }

            void execute(int start) {
                for (int i = 0; i < G.size(); i++)
                    d[i] = i == start ? 0 : INF;
                que.push({0 , start});
                while(!que.empty()) {
                    pair <int, int> p = que.top(); que.pop();
                    int from = p.second;
                    if(d[from] < p.first)continue;
                    for(int i = 0; i < G[from].size(); i++) {
                        edge e = G[from][i];
                        if(d[e.to] > d[from] + e.cost) {
                            d[e.to] = d[from] + e.cost;
                            que.push({d[e.to], e.to});
                        }
                    }
                }
            }
    };

snippet     warshall
abbr        warshall
options     head
    class Warshall {
        private:
            vector <vector <int>> G;

        public:
            Warshall(int v) {
                G = vector <vector <int>> (v, vector <int> (v));
                for(int i = 0; i < G.size(); i++)
                    for(int j = 0; j < G.size(); j++)
                        G[i][j] = i == j ? 0 : INF;
            }

            void addEdge(int start, int end, int cost) {
                G[start][end] = cost;
            }

            int dist(int start, int end) {
                return G[start][end];
            }

            bool checkNegativeCircle() {
                bool flag = false;
                for (int i = 0; i < G.size(); i++)
                    if(G[i][i] < 0)
                        flag = true;
                return flag;
            }

            void execute() {
                for(int k = 0; k < G.size(); k++)
                    for(int i = 0; i < G.size(); i++)
                        for(int j = 0; j < G.size(); j++)
                            if(G[i][k] != INF && G[k][j] != INF)
                                G[i][j] = min(G[i][j], G[i][k] + G[k][j]);
            }

    };

snippet     stronglyConnectedComponent
abbr        stronglyConnectedComponent
options     head
    struct StronglyConnectedComponents {
        int sz;
        vector <vector <int>> G, rG;
        vector <pair <int, int>> edges;
        vector <int> vs, used, root;
        int numOfVertexAfterSCC = -1;

        StronglyConnectedComponents ( int v )
            : sz( v ), G( v ), rG( v ), used( v, 0 ), root( v, -1 ) {}

        int operator [] ( int i ) {
            scc();
            return root[i];
        }

        void add_edge( int from, int to ) {
            G[from].push_back( to );
            rG[to].push_back( from );
            edges.emplace_back( from, to );
        }

        void dfs( int v ) {
            if ( used[v] ) return;
            used[v] = true;
            for ( auto & i : G[v] ) dfs( i );
            vs.push_back( v );
        }

        void rdfs( int v, int k ) {
            if ( root[v] != -1 ) return;
            root[v] = k;
            for ( auto & i : rG[v] ) rdfs( i, k );
        }

        int scc() {
            if ( numOfVertexAfterSCC != -1 ) return numOfVertexAfterSCC;
            for ( int i = 0; i < sz; i++ ) dfs( i );
            numOfVertexAfterSCC = 0;
            reverse( vs.begin(), vs.end() );
            for ( auto & i : vs ) if ( root[i] == -1 ) rdfs( i, numOfVertexAfterSCC++ );
            return numOfVertexAfterSCC;
        }

        vector <vector <int>> getDAG() {
            vector <vector <int>> res( scc() );
            set <pair <int, int>> connect;
            for ( auto & i : edges ) {
                int from = root[i.first], to = root[i.second];
                if ( from == to ) continue;
                if ( connect.count( { from, to } ) ) continue;
                res[from].push_back( to );
                connect.emplace( from, to );
            }
            return res;
        }
    };

######################
#                    #
#        Math        #
#                    #
######################
snippet     eratosthenes
abbr        eratosthenes
options     head
    vector <bool> eratosthenes(int n) {
        vector <bool> prime(n + 1, true);
        prime = vector <bool> (n + 1, true);
        if(n >= 0) prime[0] = false;
        if(n >= 1) prime[1] = false;
        for(int i = 2; i * i <= n; i++)
            if(prime[i])
                for(int j = i * 2; j < n; j += i)
                    prime[j] = false;
    }

snippet     factorial
abbr        factorial
options     head
    long long int factorial(int n) {
        long long int ans = 1;
        while(n--)
            ans = (ans * n) % MOD;
        return ans;
    }

snippet     gcd
abbr        gcd
options     head
    int gcd(int a, int b) {
        return (b == 0 ? a : gcd(b, a % b));
    }

snippet     isPrime
abbr        isPrime
options     head
    bool isPrime(int n) {
        for(int i = 2; i * i <= n; i++) if(!(n % i)) return false;
        return n == 1 ? false : true;
    }

snippet     lcm
abbr        lcm
options     head
    int gcd(int a, int b) {
        return (b == 0 ? a : gcd(b, a % b));
    }

    int lcm(int a, int b) {
        return a * b / gcd(a, b);
    }

snippet     powMod
abbr        powMod
options     head
    long long int powMod(long long int n, long long int p) {
        if(p == 0)
            return 1;
        else if(p % 2 == 0)
            return (powMod(n, p / 2) * powMod(n, p / 2)) % MOD;
        else if(p % 2 == 1)
            return (powMod(n, p - 1) * n) % MOD;
    }

#####################
#                   #
#        DP         #
#                   #
#####################

snippet     cumulativeSum2d
abbr        cumulativeSum2d
options     head
    template <typename T>
    class CumulativeSum2D {
        vector <vector <T>> sum;
        public:
        CumulativeSum2D (int h, int w) : sum(vector <vector <T>> (h + 1, vector <int> (w + 1))) {}

        T& operator()(int x, int y) {
            return sum[x][y];
        }

        void add(int x, int y, int num) {
            x++;
            y++;
            sum[x][y] += num;
        }

        void build() {
            for (int i = 1; i < sum.size(); i++) {
                for (int j = 1; j < sum[i].size(); j++) {
                    sum[i][j] += sum[i][j - 1] + sum[i - 1][j] - sum[i - 1][j - 1];
                }
            }
        }

        T operator()(int sx, int sy, int gx, int gy) {
            return (sum[gx][gy] - sum[sx][gy] - sum[gx][sy] + sum[sx][sy]);
        }
    };

snippet     digitDP
abbr        digitDP
options     head
    string n;
    //memsetで-1に初期化
    long long dp[][][];

    long long rec(int k = 0, bool tight = true, int sum = 0) {
        //終了条件
        if ( k == n.size() ) {
            return /*いいかんじに*/;
        }

        int x = n[k] - '0';
        int r = (tight ? x : 9);

        long long &res = dp[k][tight][sum];
        //メモを返す
        if ( ~res ) return res;
        res = 0;


        //遷移
        for ( int i = 0; i <=r; i++ ) {
            res += rec( k + 1, tight && i == r, /*ここいい感じに*/ );
        }

        return res;
    }


#####################
#                   #
#       Other       #
#                   #
#####################
snippet     binarySerch
abbr        binarySerch
options     head
    template <class T>
    bool c(T mid) {

    }

    template <class T>
    T execute(T low, T high) {
        for(int i = 0; i < 100; i++) {
            T mid = (high + low) / 2;
            (c(mid) ? low : high) = mid;
        }
        return low;
    }


#####################
#                   #
#       Parse       #
#                   #
#####################

snippet     parse
abbr        parse
options     head
    typedef string::const_iterator State;
    class ParseError{};

    int factor( State & );

    void consume( State & begin, char expected ) {
        if ( *begin == expected ) {
            begin++;
        }
        else {
            cerr << "Expected '" << expected << "'but got '" << *begin << "''" << endl;
            cerr << "Rest string is '";
            while ( *begin ) {
                cerr << *begin++;
            }
            cerr <<"'" << endl;
            throw ParseError();
        }
    }

    //数のパース
    int number( State & begin ) {
        int ret = 0;
        while( isdigit( *begin ) ) {
            ret *= 10;
            ret += *begin - '0';
            begin++;
        }
        return ret;
    }

    //乗算除算式のパース
    int term( State & begin ) {
        int ret = factor( begin );
        for (;;) {
            if ( *begin == '*' ) {
                begin++;
                ret *= factor( begin );
            }
            else if ( *begin == '/' ) {
                begin++;
                ret /= factor( begin );
            }
            else {
                break;
            }
        }
        return ret;
    }

    //四則演算のパース
    int expr( State & begin ) {
        int ret = term( begin );
        for (;;) {
            if ( *begin == '+' ) {
                begin++;
                ret += term( begin );
            }
            else if ( *begin == '-' ) {
                begin++;
                ret -= term( begin );
            }
            else {
                break;
            }
        }
        return ret;
    }

    //括弧か数をパースしてその評価関数を返す
    int factor( State & begin ) {
        if ( *begin == '(' ) {
            begin++;
            int ret = expr( begin );
            begin++;
            return ret;
        }
        else {
            return number( begin );
        }
    }

#####################
#                   #
#     Geometry      #
#                   #
#####################

snippet     geometry
abbr        geometry
options     head
    const double PI  = acos(-1);
    const double EPS = 1e-10;
    typedef complex <double> P;
    /*
     * 実数         : p.real() or real(p)
     * 虚数         : p.imag() or imag(p)
     * 偏角         : arg(p)
     * 長さ         : abs(p)
     * ノルム       : norm(p)
     * 共役な複素数 : conj(p)
     */

    P turn(P p,double t){ //t度回転
        return p * exp( P(.0, t * PI / 180.0 ) ); // ベクトルにe^θiをかけている
    }

    namespace std {
        bool operator < ( const P & a, const P & b ) {
            return real( a ) != real( b ) ? real( a ) < real( b )
                : imag( a ) < imag( b );
        }
        bool operator == ( const P & a, const P & b ) {
            return a.real() == b.real() &&
                a.imag() == b.imag();
        }
    }

    double dot( P a, P b ) { return real( conj( a ) * b ); }

    double cross( P a, P b ) { return imag( conj( a ) * b ); }

    struct C {
        P c;
        double r;
        C ( const P & c, double r ) : c( c ), r( r ) {}
    };

    struct L : public vector<P> {
        L ( const P & a, const P & b ) {
            push_back( a );
            push_back( b );
        }
    };

    P projection( L a, P p ) {
        double t = dot( p - a[0], a[0] - a[1] ) / norm( a[0] - a[1] );
        return a[0] + t * ( a[0] - a[1] );
    }

    P reflection( L a, P p ) {
        return p + 2.0 * ( projection( a, p ) - p );
    }

    int ccw( P a, P b, P c ) {
        b -= a; c -= a;
        if ( cross( b, c ) > 0 )         return +1;       // counter clockwise
        if ( cross( b, c ) < 0 )         return -1;       // clockwise
        if ( dot  ( b, c ) < 0 )         return +2;       // c--a--b on line
        if ( norm ( b )    < norm( c ) ) return -2;       // a--b--c on line
        return 0;
    }

    double distanceLP( const L & l, const P & p ) {
        return abs( p - projection( l, p ) );
    }

    bool intersectLL( const L & l, const L & m ) {
        return abs( cross( l[1] - l[0], m[1] - m[0] ) ) > EPS || // non-parallel
            abs( cross( l[1] - l[0], m[0] - l[0] ) ) < EPS;   // same line
    }
    bool intersectLS( const L & l, const L & s ) {
        return cross( l[1] - l[0], s[0] - l[0]) *       // s[0] is left of l
            cross( l[1] - l[0], s[1] - l[0]) < EPS; // s[1] is right of l
    }
    bool intersectLP( const L & l, const P & p ) {
        return abs( cross( l[1] - p, l[0] - p ) ) < EPS;
    }
    bool intersectSS( const L & s, const L & t ) {
        return ccw( s[0], s[1], t[0] ) * ccw( s[0], s[1], t[1] ) <= 0 &&
            ccw( t[0], t[1], s[0] ) * ccw( t[0], t[1], s[1] ) <= 0;
    }
    bool intersectSP( const L & s, const P & p ) {
        return abs( s[0] - p ) + abs( s[1] - p ) - abs( s[1] - s[0] ) < EPS; // triangle inequality
    }
    bool intersectCL( C c, const L & l ) {
        return ( distanceLP( l, c.c ) < c.r + EPS &&
                ( c.r < abs( c.c - l[0] ) + EPS || c.r < abs( c.c-l[1] ) + EPS ) );
    }
    int intersectCS( C c, L l ) {
        if ( norm( projection( l, c.c ) - c.c ) - c.r * c.r > EPS ) {
            return 0;
        }
        const double d1 = abs( c.c - l[0] ), d2 = abs( c.c - l[1] );
        if ( d1 < c.r + EPS && d2 < c.r + EPS ) {
            return 0;
        }
        if ( ( d1 < c.r - EPS && d2 > c.r + EPS ) ||
                ( d1 > c.r + EPS && d2 < c.r - EPS ) ) {
            return 1;
        }
        const P h = projection( l, c.c );
        if( dot( l[0] - h, l[1] - h ) < 0 ) {
            return 2;
        }
        return 0;
    }

    double distanceLL( const L & l, const L & m ) {
        return intersectLL( l, m ) ? 0 : distanceLP( l, m[0] );
    }
    double distanceLS( const L & l, const L & s ) {
        if ( intersectLS( l, s ) ) return 0;
        return min( distanceLP( l, s[0] ), distanceLP( l, s[1] ) );
    }
    double distanceSP( const L & s, const P & p ) {
        const P r = projection( s, p );
        if ( intersectSP( s, r ) ) return abs( r - p );
        return min( abs( s[0] - p ), abs( s[1] - p ) );
    }
    double distanceSS( const L & s, const L & t ) {
        if ( intersectSS( s, t ) ) return 0;
        return min( { distanceSP( s, t[0] ), distanceSP( s, t[1] ),
                distanceSP( t, s[0] ), distanceSP( t, s[1] ) } );
    }

    P crosspointSS( L a, L b ){
        double t1 = abs( cross( a[1] - a[0], b[0] - a[0] ) );
        double t2 = abs( cross( a[1] - a[0], b[1] - a[0] ) );
        return b[0] + ( b[1] - b[0] ) * t1 / ( t1 + t2 );
    }
    L crosspointCL( C c, L l ) {
        P pr = projection( l, c.c );
        P e  = ( l[1] - l[0] ) / abs( l[1] - l[0] );
        double t = sqrt( c.r * c.r - norm( pr - c.c ) );
        P a = pr + t * e;
        P b = pr - t * e;
        if ( b < a ) swap( a, b );
        return L( a, b );
    }
    L crosspointCC( C a, C b ) {
        P tmp = b.c - a.c;
        double d = abs( tmp );
        double q = acos( ( a.r * a.r + d * d - b.r * b.r ) / ( 2 * a.r * d ) );
        double t = arg( tmp );//atan(tmp.imag()/tmp.real());
        P p1 = a.c + polar( a.r, t + q );
        P p2 = a.c + polar( a.r, t - q );
        if( p2 < p1 ) swap( p1, p2 );
        return L( p1, p2 );
    }
    P crosspointLL( const L & l, const L & m ) {
        double A = cross( l[1] - l[0], m[1] - m[0] );
        double B = cross( l[1] - l[0], l[1] - m[0] );
        if ( abs( A ) < EPS && abs( B ) < EPS ) return m[0]; // same line
        return m[0] + B / A * ( m[1] - m[0] );
    }
    L crosspointCS( C c, L l ) {
        if ( intersectCS( c,l ) == 2 )return crosspointCL( c,l );
        L ret = crosspointCL( c,l );
        if ( dot( l[0] - ret[0], l[1] - ret[0] ) < 0 ) ret[1] = ret[0];
        else ret[0] = ret[1];
        return ret;
    }

    typedef vector<P> G;
    double area( const G & g ){//面積
        double S = 0;
        for( int i = 0; i < (int)g.size(); i++ ) {
            S += ( cross( g[i], g[( i + 1 ) % g.size()] ) );
        }
        return abs( S / 2.0 );
    }

    bool isconvex( const G & g ) {//凸多角形かどうか
        int n = g.size();
        for ( int i = 0; i < (int)g.size(); i++ ) {
            if ( ccw( g[( i + n - 1 ) % n], g[i % n], g[( i + 1 ) % n] ) == -1 )return false;
        }
        return true;
    }

    int inconvex( const G & g, const P & p ) {//点が凸多角形の中にあるかないか
        bool in = false;
        int n = g.size();
        for ( int i = 0; i < n; i++ ) {
            P a = g[i % n] - p;
            P b = g[( i + 1 ) % n] - p;
            if( imag( a ) > imag( b ) ) swap( a, b );
            if( imag( a ) <= 0 && 0 < imag( b ) ) if( cross( a,b ) < 0) in = ! in;
            if( cross( a, b ) == 0 && dot( a,b ) <= 0 )return 1;//ON
        }
        return in ? 2 : 0;//IN : OUT
    }

    G convex_hull( G & ps ) {
        int n = ps.size(), k = 0;
        sort( ps.begin(), ps.end() );//このとき演算子<の定義によって結果がかわる？
        G ch( 2 * n );
        for ( int i = 0; i < n; ch[k++] = ps[i++] ) {//lower-hull
            while( k >= 2 && ccw( ch[k-2], ch[k-1], ps[i] )== -1 ) --k;//<=0  ->  ==-1
        }
        for( int i = n - 2, t = k + 1; i >= 0; ch[k++] = ps[i--] ) {//upper-hull
            while( k >= t && ccw( ch[k-2], ch[k-1], ps[i] ) == -1 ) --k;//
        }
        ch.resize( k - 1 );
        return ch;
    }
